
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# TODO: Don't trigger_dependent_git_repos.
#       Instead have option to control when this run is for a single
#       repo or if for a chain starting with this repo.
#       If for a chain, start by creating a list of all the dependents.
#       Then build these in a chain, one by one.
#       This will considerably speed up Travis cycle-time since
#       Travis won't need to [docker pull] the image created on
#       the [docker push] step for the previous repo.
#       However, it may start to hit the 50min max time for
#       a single (public) Travis run.
#
# TODO: If TRAVIS env-var is defined check if DOCKER_ env-vars
#       are defined. If they are not issue error diagnostic and fail.
#       If TRAVIS env-var is not defined, check if DOCKER_ env-vars
#       are defined. If they are not issue warning diagnostic and continue
#       and do not do [docker login/push] commands.
#
#       If on Travis do a [git clone] of dependent repo
#       to continue the image-chain build.
#       If not on Travis, instead of doing [git clone]
#       assume the repo is in .. dir and simply use that.
#       However, that assumes the not just the current dir
#       but all its sibling dirs are available inside the
#       container. Currently I'm volume-mounting and then doing
#       a [cp -R] which is starting to sound impractical.
#       I think I need a data-container which I reuse.
#
#       Also, when not on Travis, instead of curling the
#       cyber-dojo script, check if cyber-dojo script is on path
#       and if so, use that. If no cyber-dojo script on path
#       then issue an error.
#       However that again confuses cyber-dojo being available
#       on the host which is not the same as the cyber-dojo
#       script being available inside the container.
#
# TODO: add information on how long red/amber/green runs take.
#       issue warning if they take too long?

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# TODO: are we are on Travis or running locally?
# If on Travis, then only the current dir needs to be
# volume mounted so it is visible inside the container.
# Dependent repos will be git clones.
# If locally, then I need to volume-mount the base-dir
# so that all dependent repos will be available inside
# the container without doing a git clone. I could of course
# still do git clones, but I want to be able to edit
# multiple repos in the chain locally.

# TODO: volume-mount the cyber-dojo script inside the
# container if running locally? (I run it to check a
# dir's start_point/ is valid).
# This would avoid needing to curl it.

# TODO: think I need to volume-mount the json file
# containing the dependency triples. Unless this is
# parameterizable the script won't be much use for
# someone testing out their own language/test repos.
# Or maybe make using this dependency list optional???
# Default could be just to build for the dir named on
# the command-line. How to extend beyond that?
# If a json file is named then use that?
# That would work well on Travis.
# Could also use the base-dir of the dir given.
# That would work well for a local build.


# display timings
# - - - - - - - -
# I would like to scrape the Travis logs for all the language
# repos and display the red/amber/green test durations in a
# sorted list.


# display version numbers
# - - - - - - - - - - - -
# the base-language versions be gathered from the dependency table
# I can split the table into named sections and create a section for the
# base-language entries and then the version numbers
# can be harvested from that.

# TODO: add checks that the version numbers of
# the repo-name and the image-name match up.

# TODO: add check that the repo-names version
# numbers use -1.2.3 format.

# TODO: add check that the image-names for
# base images use version numbers use :1.2.3 format.

# TODO: add check that the image-names for
# language+test images do NOT use version numbers.
# Is this what I want?
# I could a version number here and then _also_
# tag the image as latest (and push that)
# (possibly with a command line option).
# Orthogonal to that, what version number do I use?
# The language's or the test framework's? Or both?
